[{"D:\\React\\timerapp\\src\\index.tsx":"1","D:\\React\\timerapp\\src\\reportWebVitals.ts":"2","D:\\React\\timerapp\\src\\App.tsx":"3","D:\\React\\timerapp\\src\\API.tsx":"4","D:\\React\\timerapp\\src\\utilities.tsx":"5","D:\\React\\timerapp\\src\\QuizCard.tsx":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":2958,"mtime":1607353861279,"results":"10","hashOfConfig":"8"},{"size":806,"mtime":1607271606881,"results":"11","hashOfConfig":"8"},{"size":86,"mtime":1607269755820,"results":"12","hashOfConfig":"8"},{"size":4498,"mtime":1607354600112,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"ijkjwx",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"16"},"D:\\React\\timerapp\\src\\index.tsx",[],["31","32"],"D:\\React\\timerapp\\src\\reportWebVitals.ts",[],"D:\\React\\timerapp\\src\\App.tsx",["33","34","35","36"],"import React, { useState, useEffect } from \"react\";\nimport { Quiz } from \"./QuizCard\";\nimport logo from \"./logo.svg\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nimport \"./App.css\";\nimport { fetchQuestion, Difficulty, QuestionState } from \"./API\";\nimport { Paper } from \"@material-ui/core\";\nimport { any } from \"prop-types\";\nfunction App() {\n  var[status,setStatus] = useState(0);\n  var [questions, setQuestions] = useState<QuestionState[]>([]);\n  var [answer, setAnswer] = useState<AnswerObject[]>([]);\n  var [count, setCount] = useState(0);\n  const [loading, setLoading] = useState(true);\n  var [Score, setScore] = useState(0);\n  var [finish, setFinish] = useState(true);\n  const total_questions = 10;\n  type AnswerObject = {\n    question: string;\n    answer: string;\n    correct: boolean;\n    correctAnswer: string;\n  };\n\n  const Start = async () => {\n    setLoading(true);\n    setFinish(false);\n    const newquestions = await fetchQuestion(total_questions, Difficulty.EASY);\n    setQuestions(newquestions);\n    setScore(0);\n    setAnswer([]);\n    setCount(0);\n    setLoading(false);\n  };\n  const nextQuestion = async() => {\n    setStatus(2)\n    if(count===total_questions-1){\n      setFinish(true);\n    }\n    else{\n    setCount((count += 1));\n    }\n  };\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if(!finish){\n      const answer = e.currentTarget.value;\n      console.log(e.currentTarget)\n      const corrAnswer=questions[count].correct_answer ===answer\n      \n      if(corrAnswer){\n        setStatus(1)\n        setScore(Score+=10)\n      console.log(Score)\n    };\n      if(!corrAnswer){\n        setStatus(0);\n\n      }\n      const answerObject = {\n        question: questions[count].question,\n        answer,\n        correct:false,\n        correctAnswer: questions[count].correct_answer,\n      };\n      setAnswer(prev=>[...prev,answerObject])\n    }\n  };\n  return (\n    <div className='main' style={{height:'953px'}}>\n      \n      \n      {finish || count === total_questions - 1 ? (\n        <button className='start'onClick={Start}>Start</button>\n      ) : null}\n      {loading &&!finish ? <CircularProgress color=\"secondary\" /> : null}\n\n<div className='subMain' style={{display:'flex',flexDirection:'column',justifyContent:'center',alignItems:'center'}}>\n      {!loading && !finish ? (\n        \n        <Quiz\n          totalQuestion={total_questions}\n          questionNo={count + 1}\n          Question={questions[count].question}\n          answer={questions[count].answer}\n          userAnswer={answer ? answer[count] : undefined}\n          callback={checkAnswer}\n          status={status}\n          score={Score}\n        />\n        \n        ) : null}\n      {!loading && !finish && answer.length === count + 1 &&count !== total_questions-1? (\n        <button className=\"next\" onClick={nextQuestion}>\n          Next\n        </button>\n      ) : null}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\React\\timerapp\\src\\API.tsx",["37"],"import { type } from \"os\";\r\n\r\nimport {shuffleArray} from './utilities'\r\n\r\nexport const fetchQuestion=async(amount:number,difficulty:Difficulty)=>{\r\nconst endpoint =  `https://opentdb.com/api.php?amount=${amount}&category=23&difficulty=${difficulty}&type=multiple`;\r\nconst Data= await (await fetch(endpoint)).json()\r\nreturn Data.results.map((question:Question)=>(\r\n    {\r\n        ...question,\r\n        answer:shuffleArray([...question.incorrect_answers,question.correct_answer])\r\n    }\r\n))\r\n}\r\nexport enum Difficulty{\r\n    EASY='easy',\r\n    MEDIUM='medium',\r\n    HARD='hard'\r\n}\r\nexport type Question={\r\n    category:string;\r\n    difficulty:string;\r\n    incorrect_answers:string[];\r\n    question:string;\r\n    correct_answer:string;\r\n    type:string;\r\n}\r\nexport type QuestionState= Question&{answer:string[]};","D:\\React\\timerapp\\src\\utilities.tsx",[],["38","39"],"D:\\React\\timerapp\\src\\QuizCard.tsx",["40","41","42","43","44"],"import React, { Component,useState,useEffect } from 'react'\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport useWebAnimations, { bounce } from \"@wellyshen/use-web-animations\";\r\nimport './App.css'\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: theme.spacing(16),\r\n      height: theme.spacing(16),\r\n    },\r\n  },\r\n  active: {\r\n    width: \"100%\",\r\n    color: \"white\",\r\n    fontSize: \"30px\",\r\n    border:'none',\r\n    fontFamily: \"Nerko One, cursive\",\r\n    backgroundImage:\r\n      \"linear-gradient(to right, #00ffd6 , #008fb5 100%,#166e86 100%)\",\r\n    fontWeight: 500,\r\n  },\r\n}));\r\n\r\ntype Props = {\r\n   Question:string;\r\n    answer:string[];\r\n    callback:any;\r\n    userAnswer:any;\r\n    questionNo:number;\r\n    totalQuestion:number;\r\n    status:number;\r\n    score:number;\r\n    \r\n}\r\nexport const Quiz: React.FC<Props> =({score,status,Question,answer,callback,questionNo,userAnswer,totalQuestion})=>{\r\n  const{ref,playState,getAnimation} = useWebAnimations({...bounce})\r\n  const keyframe = [\r\n    { boxShadow: \"0px 0px 8px 6px white\", transform: \"rotate(0)\" },\r\n    { boxShadow: \"1px 1px 7px 6px #ff4f6d\", transform: \"rotate(5deg)\" },\r\n    { boxShadow: \"2px 2px 6px 6px #63101e\", transform: \"rotate(-5deg)\" },\r\n    { boxShadow: \"3px 3px 7px 6px #940019\", transform: \"rotate(5deg)\" },\r\n    { boxShadow: \"5px 5px 8px 6px #f01c40\", transform: \"rotate(-5deg)\" },\r\n    { boxShadow: \"3px 3px 9px 6px #fb002b\", transform: \"rotate(0deg)\" },\r\n  ];\r\n  const timing={\r\n    duration:1000,\r\n    iteration:1,\r\n    easing:'ease-in-out'\r\n  }\r\n  const keyframe1 = [\r\n    { boxShadow: \"0px 0px 8px 6px white\" },\r\n    { boxShadow: \"1px 1px 7px 6px #1eb69e\" },\r\n    { boxShadow: \"2px 2px 6px 6px #57ffe4\" },\r\n    { boxShadow: \"3px 3px 7px 6px #d2f75c\" },\r\n    { boxShadow: \"5px 5px 8px 6px #bff219\" },\r\n    { boxShadow: \"3px 3px 9px 6px #fbee08\" },\r\n  ];\r\n  const timing1 = {\r\n    duration: 1000,\r\n    iteration: 1,\r\n    easing: \"ease-in-out\",\r\n  };\r\n  useEffect(()=>{\r\n    getAnimation()?.pause();\r\n    if(status===1){\r\n  const anim = document.getElementById(\"paper\")?.animate(keyframe1, timing1);\r\n      getAnimation()?.play();\r\n    }\r\n    else if(status===0){\r\n  const anim = document.getElementById(\"paper\")?.animate(keyframe, timing);\r\n      anim?.play();\r\n\r\n    }\r\n  },[status])\r\n  const classes = useStyles();\r\n  var [clas,setClass]=useState('simple')\r\nconst active=()=> setClass('active')\r\nconst unactive = () => setClass('simple');\r\n    return (\r\n      <div>\r\n        <Paper\r\n          id=\"paper\"\r\n          ref={ref ? ref : null}\r\n          style={{\r\n            marginTop: \"70px\",\r\n            boxShadow: \"3px 3px 8px 4px rgb(0,0,0,0.4)\",\r\n            padding: \"20px\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <p\r\n            style={{\r\n              fontSize: \"27px\",\r\n              marginBottom: \"1px\",\r\n              fontFamily: \"Nerko One, cursive\",\r\n              fontWeight: 500,\r\n              textDecoration: \"underline\",\r\n              position: \"relative\",\r\n              margin: \"right\",\r\n            }}\r\n          >\r\n            SCORE:{score}\r\n          </p>\r\n          <p\r\n            style={{\r\n              fontSize: \"30px\",\r\n              fontFamily: \"Nerko One,cursive\",\r\n              fontWeight:600,\r\n              padding: \"4px\",\r\n              borderBottom: \"4px solid black\",\r\n            }}\r\n          >\r\n            {questionNo}/{totalQuestion}\r\n          </p>\r\n          <h1\r\n            dangerouslySetInnerHTML={{ __html: Question }}\r\n            style={{ textAlign:'center',fontSize: \"30px\", fontFamily: \"Nerko One, cursive\",fontWeight:500}}\r\n          />\r\n          {answer.map((val, i) => (\r\n            <Paper\r\n              style={{ width: \"30%\", margin: \"5px\" }}\r\n              elevation={4}\r\n              onDoubleClick={unactive}\r\n              onClick={active}\r\n            >\r\n              <button\r\n                onClick={callback}\r\n                className={userAnswer ? classes.active : \"simple\"}\r\n                disabled={userAnswer}\r\n                value={val}\r\n              >\r\n                <span dangerouslySetInnerHTML={{ __html: val }}></span>\r\n              </button>\r\n            </Paper>\r\n          ))}\r\n        </Paper>\r\n      </div>\r\n    );\r\n}\r\n",{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":1,"column":27,"nodeType":"51","messageId":"52","endLine":1,"endColumn":36},{"ruleId":"49","severity":1,"message":"53","line":3,"column":8,"nodeType":"51","messageId":"52","endLine":3,"endColumn":12},{"ruleId":"49","severity":1,"message":"54","line":8,"column":10,"nodeType":"51","messageId":"52","endLine":8,"endColumn":15},{"ruleId":"49","severity":1,"message":"55","line":9,"column":10,"nodeType":"51","messageId":"52","endLine":9,"endColumn":13},{"ruleId":"49","severity":1,"message":"56","line":1,"column":10,"nodeType":"51","messageId":"52","endLine":1,"endColumn":14},{"ruleId":"45","replacedBy":"57"},{"ruleId":"47","replacedBy":"58"},{"ruleId":"49","severity":1,"message":"59","line":1,"column":17,"nodeType":"51","messageId":"52","endLine":1,"endColumn":26},{"ruleId":"49","severity":1,"message":"60","line":40,"column":13,"nodeType":"51","messageId":"52","endLine":40,"endColumn":22},{"ruleId":"49","severity":1,"message":"61","line":70,"column":9,"nodeType":"51","messageId":"52","endLine":70,"endColumn":13},{"ruleId":"62","severity":1,"message":"63","line":78,"column":5,"nodeType":"64","endLine":78,"endColumn":13,"suggestions":"65"},{"ruleId":"49","severity":1,"message":"66","line":80,"column":8,"nodeType":"51","messageId":"52","endLine":80,"endColumn":12},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'logo' is defined but never used.","'Paper' is defined but never used.","'any' is defined but never used.","'type' is defined but never used.",["67"],["68"],"'Component' is defined but never used.","'playState' is assigned a value but never used.","'anim' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getAnimation', 'keyframe', 'keyframe1', 'timing', and 'timing1'. Either include them or remove the dependency array.","ArrayExpression",["69"],"'clas' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"70","fix":"71"},"Update the dependencies array to be: [getAnimation, keyframe, keyframe1, status, timing, timing1]",{"range":"72","text":"73"},[2424,2432],"[getAnimation, keyframe, keyframe1, status, timing, timing1]"]